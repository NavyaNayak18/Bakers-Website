{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\navya\\\\Documents\\\\pace\\\\sem 2\\\\Enterprise Computing\\\\Team Project\\\\The Bakers\\\\frontend\\\\src\\\\hooks\\\\useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, createContext, useContext } from 'react';\nimport * as userService from '../services/userService';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(userService.getUser());\n  const login = async (email, password) => {\n    try {\n      const user = await userService.login(email, password);\n      setUser(user);\n      toast.success('Login Successful');\n    } catch (err) {\n      toast.error(err.response.data);\n    }\n  };\n  const register = async data => {\n    try {\n      const user = await userService.register(data);\n      setUser(user);\n      toast.success('Register Successful');\n    } catch (err) {\n      toast.error(err.response.data);\n    }\n  };\n  const logout = () => {\n    userService.logout();\n    setUser(null);\n    toast.success('Logout Successful');\n  };\n  const updateProfile = async user => {\n    const updatedUser = await userService.updateProfile(user);\n    toast.success('Profile Update Was Successful');\n    if (updatedUser) setUser(updatedUser);\n  };\n  const changePassword = async passwords => {\n    await userService.changePassword(passwords);\n    logout();\n    toast.success('Password Changed Successfully, Please Login Again!');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      register,\n      updateProfile,\n      changePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"d433BNb37faEp65cAsZrPTk+Szo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","createContext","useContext","userService","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","_s","children","user","setUser","getUser","login","email","password","success","err","error","response","data","register","logout","updateProfile","updatedUser","changePassword","passwords","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/navya/Documents/pace/sem 2/Enterprise Computing/Team Project/The Bakers/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, createContext, useContext } from 'react';\nimport * as userService from '../services/userService';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(userService.getUser());\n\n  const login = async (email, password) => {\n    try {\n      const user = await userService.login(email, password);\n      setUser(user);\n      toast.success('Login Successful');\n    } catch (err) {\n      toast.error(err.response.data);\n    }\n  };\n\n  const register = async data => {\n    try {\n      const user = await userService.register(data);\n      setUser(user);\n      toast.success('Register Successful');\n    } catch (err) {\n      toast.error(err.response.data);\n    }\n  };\n\n  const logout = () => {\n    userService.logout();\n    setUser(null);\n    toast.success('Logout Successful');\n  };\n\n  const updateProfile = async user => {\n    const updatedUser = await userService.updateProfile(user);\n    toast.success('Profile Update Was Successful');\n    if (updatedUser) setUser(updatedUser);\n  };\n\n  const changePassword = async passwords => {\n    await userService.changePassword(passwords);\n    logout();\n    toast.success('Password Changed Successfully, Please Login Again!');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ user, login, logout, register, updateProfile, changePassword }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA,SAASA,QAAQ,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAC3D,OAAO,KAAKC,WAAW,MAAM,yBAAyB;AACtD,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAACG,WAAW,CAACW,OAAO,EAAE,CAAC;EAEvD,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAML,IAAI,GAAG,MAAMT,WAAW,CAACY,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACrDJ,OAAO,CAACD,IAAI,CAAC;MACbR,KAAK,CAACc,OAAO,CAAC,kBAAkB,CAAC;IACnC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZf,KAAK,CAACgB,KAAK,CAACD,GAAG,CAACE,QAAQ,CAACC,IAAI,CAAC;IAChC;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMD,IAAI,IAAI;IAC7B,IAAI;MACF,MAAMV,IAAI,GAAG,MAAMT,WAAW,CAACoB,QAAQ,CAACD,IAAI,CAAC;MAC7CT,OAAO,CAACD,IAAI,CAAC;MACbR,KAAK,CAACc,OAAO,CAAC,qBAAqB,CAAC;IACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZf,KAAK,CAACgB,KAAK,CAACD,GAAG,CAACE,QAAQ,CAACC,IAAI,CAAC;IAChC;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBrB,WAAW,CAACqB,MAAM,EAAE;IACpBX,OAAO,CAAC,IAAI,CAAC;IACbT,KAAK,CAACc,OAAO,CAAC,mBAAmB,CAAC;EACpC,CAAC;EAED,MAAMO,aAAa,GAAG,MAAMb,IAAI,IAAI;IAClC,MAAMc,WAAW,GAAG,MAAMvB,WAAW,CAACsB,aAAa,CAACb,IAAI,CAAC;IACzDR,KAAK,CAACc,OAAO,CAAC,+BAA+B,CAAC;IAC9C,IAAIQ,WAAW,EAAEb,OAAO,CAACa,WAAW,CAAC;EACvC,CAAC;EAED,MAAMC,cAAc,GAAG,MAAMC,SAAS,IAAI;IACxC,MAAMzB,WAAW,CAACwB,cAAc,CAACC,SAAS,CAAC;IAC3CJ,MAAM,EAAE;IACRpB,KAAK,CAACc,OAAO,CAAC,oDAAoD,CAAC;EACrE,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAACsB,QAAQ;IACnBC,KAAK,EAAE;MAAElB,IAAI;MAAEG,KAAK;MAAES,MAAM;MAAED,QAAQ;MAAEE,aAAa;MAAEE;IAAe,CAAE;IAAAhB,QAAA,EAEvEA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAE3B,CAAC;AAACxB,EAAA,CAhDWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAkDzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnC,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC8B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}